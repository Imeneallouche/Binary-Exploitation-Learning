from pwn import *


l = ELF('/bin/bash')

# p32: this is what we call the little indian
print("we loaded the bin/bash file in (ELF) format")

# l.address is to know what is the base address of the binary file
print("address of the bin/bash file: ", hex(l.address))
print('\n')

# entry is to know what is the entry address of the file
print("entry address of the file: ", hex(l.entry))
print('\n')


# if we would like to look for a specific symbol from the global offset
print("grab a specific symbol from GLOBAL OFFSET TABLE", hex(l.got["write"]))
print('\n')


# if we would like to grab a specific symbol from the procedure linkage table
print("grab a specific symbol from PROCEDURE LINKAGE TABLE: ",
      hex(l.plt["write"]))
print('\n')

# if we would like to jump to a specific address in the binary file
for address in l.search(b'/bin/sh\x00'):
    print("address: ", hex(address))

print("\n")
print("address of assembly instrustion 'jmp esp': ",
      (hex(next(l.search(asm('jmp esp'))))))


print("\nnow using ROP")
r = ROP(l)
print(r.rbx)


# we can xor ASCII letters and even numbers
expression = "Hello world"
char1 = "A"
char2 = "B"

print("\n", char1, " xor ", char2, " = ", xor(char1, char2))
print("b64e(b'test') = ", b64e(b"test"))
print(f"b64d(b'{b64e(b'test')}') = ", b64d(b64e(b'test')))
print(f"md5sumhex(b'{expression}') = ", md5sumhex(b'hello world'))
#print(md5sumhex(b'hello world'))
#print(f"shalsumhex(b'{expression}') = " , shalsumhex(b"hello world"))
print(bits(b'a'))
print(unbits([1, 1, 1, 1, 1, 1]))
